@page
@using CarRental.Core.Models
@model CarRental.FrontEnd.Pages.EmployeesModel
@{
    ViewData["Title"] = "Clients";
    Layout = "Shared/_Layout";
}

<table class="table" border="2">
    <tr class="my-table-row-headings">
        <th>ID</th>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Position</th>
    </tr>
    @foreach (Employee employee in Model.allEmployees)
    {
        <tr class="my-table-row">
            <td>@employee.Id</td>
            <td>@employee.FirstName</td>
            <td>@employee.LastName</td>
            <td>@employee.Position</td>

        </tr>
    }
</table>
<br>
<h1>Insert form</h1>
<h3>Please fill information below to create new Employee</h3>
<form id="employeeInsertForm" class="form-control">
    <label for="firstName" class="col-form-label"><b>First Name</b></label><br>
    <input type="text" id="firstName" name="firstName" required><br>
    <label for="lastName"><b>Last Name</b></label><br>
    <input type="text" id="lastName" name="lastName" required><br>
    <label for="position"><b>Position</b></label><br>
    <input type="number" id="position" name="position" required><br>
    <br>
    <button type="submit" id="submit-insert-button">Submit</button>
</form>
<br>
<h1>Update form</h1>
<h3>Please fill information below to update Employee</h3>
<form id="employeeUpdateForm" class="form-control">
    <label for="id"><b>Employee</b></label><br>
    <select name="id" id="employeeList">
        <option value="0">Please select Employee</option>
        @foreach (var emp in Model.allEmployees)
        {
            <option value="@emp.Id">@emp</option>
        }
    </select>
    <br>
    <label for="firstName" class="col-form-label"><b>First Name</b></label><br>
    <input type="text" id="updateFirstName" name="firstName" required><br>
    <label for="lastName"><b>Last Name</b></label><br>
    <input type="text" id="updateLastName" name="lastName" required><br>
    <label for="position"><b>Position</b></label><br>
    <input type="text" id="updatePosition" name="position" required><br>
    <br>
    <button type="submit" id="submit-update-button">Submit</button>
</form>
<br>
<h1>Delete form</h1>
<h3>Please enter ID to delete Employee</h3>
<form id="employeeDeleteForm" class="form-control">
    <label for="id"><b>Id</b></label><br>
    <input type="text" id="deleteId" name="id" required><br>
    <br>
    <button type="submit" id="submit-delete-button">Submit</button>
</form>

<script>
    //get
    function getEmployeeData(endpoint) {
        fetch(endpoint, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
        })
            .then(async response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                const employee = await response.json();
                document.getElementById('updateFirstName').value = employee.firstName;
                document.getElementById('updateLastName').value = employee.lastName;
                document.getElementById('updatePosition').value = employee.position;
            })
            .then(data => {
                console.log('Success:', data);
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }
    document.getElementById('employeeList').addEventListener('change', function (event) {
        event.preventDefault();
        const endpoint = `https://localhost:7257/GetEmployeeById?id=` + document.getElementById('employeeList').value;
        getEmployeeData(endpoint);
    });

    //insert
    function sendFormDataInsertEmployee(endpoint, formData) {
        const plainFormData = Object.fromEntries(formData.entries());
        const jsonString = JSON.stringify(plainFormData);
        var submitButton = document.getElementById('submit-insert-button');
        submitButton.innerText = 'Creating new Employee';
        submitButton.style.background = '#49cc90';
        fetch(endpoint, {
            method: 'POST',
            body: jsonString,
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                alert('Creation successful');
                window.location.href = '/Employees'
            })
            .then(data => {
                console.log('Success:', data);
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }

    document.getElementById('employeeInsertForm').addEventListener('submit', function (event) {
        event.preventDefault();
        const endpoint = 'https://localhost:7257/InsertEmployee';
        const formData = new FormData(this);
        sendFormDataInsertEmployee(endpoint, formData);
    });

    //update
    function sendFormDataUpdateEmployee(endpoint, formData) {
        const plainFormData = Object.fromEntries(formData.entries());
        const jsonString = JSON.stringify(plainFormData);
        var submitButton = document.getElementById('submit-update-button');
        submitButton.innerText = 'Updating Employee';
        submitButton.style.background = '#fca130';
        fetch(endpoint, {
            method: 'PUT',
            body: jsonString,
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                alert('Updated successful');
                window.location.href = '/Employees'
            })
            .then(data => {
                console.log('Success:', data);
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }

    document.getElementById('employeeUpdateForm').addEventListener('submit', function (event) {
        event.preventDefault();
        const endpoint = 'https://localhost:7257/UpdateEmployee';
        const formData = new FormData(this);
        sendFormDataUpdateEmployee(endpoint, formData);
    });

    //delete
    function sendFormDataDeleteEmployee(endpoint, formData) {
        const plainFormData = Object.fromEntries(formData.entries());
        const jsonString = JSON.stringify(plainFormData);
        var submitButton = document.getElementById('submit-delete-button');
        submitButton.innerText = 'Deleting Employee';
        submitButton.style.background = '#fca130';
        endpoint += '/' + document.getElementById('deleteId').value;
        fetch(endpoint, {
            method: 'DELETE',
            body: jsonString,
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                alert('Delete successful');
                window.location.href = '/Employees'
            })
            .then(data => {
                console.log('Success:', data);
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }

    document.getElementById('employeeDeleteForm').addEventListener('submit', function (event) {
        event.preventDefault();
        const endpoint = 'https://localhost:7257/DeleteEmployee';
        const formData = new FormData(this);
        sendFormDataDeleteEmployee(endpoint, formData);
    });
</script>